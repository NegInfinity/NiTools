using UnityEngine;

namespace NiTools.Polygonizer{

using static NiTools.MarchingCubes.CubeUtilities;
using static NiTools.BitUtilities;
using Vec3f = Vector3;

public struct MarchingCubesPolygonizer{
	public delegate float CellValueDelegate(Vec3f coord);
	public delegate void TriangleDelegate(Vec3f a, Vec3f b, Vec3f c);

	static Vector3 getEdgePos(System.Span<Vector3> verts, System.Span<float> values, int edgeStart, int edgeEnd){
		var endVal = values[edgeEnd];
		var startVal = values[edgeStart];
		var lerpVal = (endVal == startVal) ? 0.0f: (0.0f - startVal)/(endVal - startVal);
		return Vector3.Lerp(verts[edgeStart], verts[edgeEnd], lerpVal);
	}

	static void processCube(Vec3f cellMin, Vec3f cellMax, CellValueDelegate cellValue, TriangleDelegate triangleFunc){
		System.Span<Vec3f> cellCoords = stackalloc Vec3f[8];
		System.Span<float> cellValues = stackalloc float[8];
		int cellCode = 0;
		for(int i = 0; i < 8; i++){
			var pos = getCellCorner(i, cellMin, cellMax);
			cellCoords[i] = pos;
			var val = cellValue(pos);
			cellValues[i] = val;
			if (val > 0)
				cellCode = setBit(cellCode, i, true);
		}

		var face = compressedCubes.getFace(cellCode);

		for(int i = 0; i < face.numVerts; i+= 3){
			var idxA = compressedCubes.indices[i + face.offset + 0];
			var idxB = compressedCubes.indices[i + face.offset + 1];
			var idxC = compressedCubes.indices[i + face.offset + 2];

			var edgeA = compressedCubes.getEdge(idxA);
			var edgeB = compressedCubes.getEdge(idxB);
			var edgeC = compressedCubes.getEdge(idxC);

			var a = getEdgePos(cellCoords, cellValues, edgeA.start, edgeA.end);
			var b = getEdgePos(cellCoords, cellValues, edgeB.start, edgeB.end);
			var c = getEdgePos(cellCoords, cellValues, edgeC.start, edgeC.end);

			triangleFunc(a, b, c);
		}
	}

	public static void build(Vec3f minCoord, Vec3f maxCoord, Vector3Int numSegments, CellValueDelegate cellValue, TriangleDelegate triangleFunc){
		if ((numSegments.x < 1) || (numSegments.y < 1) || (numSegments.z < 1))
			return;
		{
			var tmpA = minCoord;
			var tmpB = maxCoord;
			minCoord = Vec3f.Min(tmpA, tmpB);
			maxCoord = Vec3f.Max(tmpA, tmpB);
		}

		var delta = maxCoord - minCoord;
		delta.x /= numSegments.x;
		delta.y /= numSegments.y;
		delta.z /= numSegments.z;

		for(int y = 0; y < numSegments.y; y++){
			for(int z = 0; z < numSegments.z; z++){
				for(int x = 0; x < numSegments.x; x++){
					var cellStart = new Vec3f(
						x * delta.x, y * delta.y, z * delta.z
					) + minCoord;
					var cellEnd = cellStart + delta;
					processCube(cellStart, cellEnd, cellValue, triangleFunc);
				}
			}
		}
	}

	static readonly NiTools.MarchingCubes.CompressedMarchingCubes compressedCubes = new(
		new byte[]{
			0, 1, 2, 3, 0, 2, 1, 3, 0, 4, 1, 5, 2, 6, 3, 7, 4, 5, 6, 7, 4, 6, 5, 7
		},
		new int[]{
			0, 0, 0, 3, 3, 3, 6, 6, 12, 3, 15, 6, 21, 6, 27, 9,
			36, 3, 39, 6, 45, 6, 51, 9, 60, 6, 66, 9, 75, 9, 84, 6,
			90, 3, 93, 6, 99, 6, 105, 9, 114, 6, 120, 9, 129, 15, 144, 12,
			156, 6, 162, 9, 171, 9, 180, 12, 192, 9, 201, 12, 213, 12, 225, 9,
			234, 3, 237, 6, 243, 6, 249, 9, 258, 6, 264, 9, 273, 9, 282, 12,
			294, 6, 300, 15, 315, 9, 324, 12, 336, 9, 345, 12, 357, 12, 369, 9,
			378, 6, 384, 9, 393, 9, 402, 6, 408, 9, 417, 12, 429, 12, 441, 9,
			450, 9, 459, 12, 471, 12, 483, 9, 492, 12, 504, 9, 513, 9, 522, 6,
			528, 3, 531, 6, 537, 6, 543, 9, 552, 6, 558, 9, 567, 9, 576, 12,
			588, 6, 594, 15, 609, 9, 618, 12, 630, 9, 639, 12, 651, 12, 663, 9,
			672, 6, 678, 9, 687, 9, 696, 12, 708, 9, 717, 6, 723, 12, 735, 9,
			744, 9, 753, 12, 765, 12, 777, 9, 786, 12, 798, 9, 807, 9, 816, 6,
			822, 6, 828, 15, 843, 9, 852, 12, 864, 9, 873, 12, 885, 12, 897, 9,
			906, 15, 921, 18, 939, 12, 951, 15, 966, 12, 978, 15, 993, 9, 1002, 6,
			1008, 9, 1017, 12, 1029, 12, 1041, 9, 1050, 12, 1062, 9, 1071, 9, 1080, 6,
			1086, 12, 1098, 15, 1113, 9, 1122, 6, 1128, 9, 1137, 6, 1143, 6, 1149, 3,
			1152, 3, 1155, 6, 1161, 6, 1167, 9, 1176, 6, 1182, 9, 1191, 15, 1206, 12,
			1218, 6, 1224, 9, 1233, 9, 1242, 12, 1254, 9, 1263, 12, 1275, 12, 1287, 9,
			1296, 6, 1302, 9, 1311, 15, 1326, 12, 1338, 15, 1353, 12, 1365, 18, 1383, 15,
			1398, 9, 1407, 12, 1419, 12, 1431, 9, 1440, 12, 1452, 9, 1461, 15, 1476, 6,
			1482, 6, 1488, 9, 1497, 9, 1506, 12, 1518, 9, 1527, 12, 1539, 12, 1551, 9,
			1560, 9, 1569, 12, 1581, 6, 1587, 9, 1596, 12, 1608, 9, 1617, 9, 1626, 6,
			1632, 9, 1641, 12, 1653, 12, 1665, 9, 1674, 12, 1686, 9, 1695, 15, 1710, 6,
			1716, 12, 1728, 9, 1737, 9, 1746, 6, 1752, 9, 1761, 6, 1767, 6, 1773, 3,
			1776, 6, 1782, 9, 1791, 9, 1800, 12, 1812, 9, 1821, 12, 1833, 12, 1845, 9,
			1854, 9, 1863, 12, 1875, 12, 1887, 9, 1896, 6, 1902, 9, 1911, 9, 1920, 6,
			1926, 9, 1935, 12, 1947, 12, 1959, 9, 1968, 12, 1980, 9, 1989, 15, 2004, 6,
			2010, 12, 2022, 9, 2031, 9, 2040, 6, 2046, 9, 2055, 6, 2061, 6, 2067, 3,
			2070, 9, 2079, 12, 2091, 12, 2103, 9, 2112, 12, 2124, 9, 2133, 9, 2142, 6,
			2148, 12, 2160, 15, 2175, 9, 2184, 6, 2190, 9, 2199, 6, 2205, 6, 2211, 3,
			2214, 6, 2220, 9, 2229, 9, 2238, 6, 2244, 9, 2253, 6, 2259, 6, 2265, 3,
			2268, 9, 2277, 6, 2283, 6, 2289, 3, 2292, 6, 2298, 3, 2301, 3, 2304, 0
		},
		new byte[]{
			0, 4, 2, 3, 5, 0, 2, 3, 4, 4, 3, 5, 2, 6, 1, 1, 0, 6,
			6, 0, 4, 3, 5, 0, 2, 6, 1, 6, 1, 3, 6, 3, 5, 6, 5, 4,
			1, 7, 3, 0, 4, 2, 1, 7, 3, 0, 1, 5, 5, 1, 7, 4, 2, 1,
			4, 1, 7, 4, 7, 5, 3, 2, 7, 7, 2, 6, 7, 3, 0, 7, 0, 4,
			7, 4, 6, 5, 0, 2, 5, 2, 6, 5, 6, 7, 6, 7, 5, 6, 5, 4,
			10, 4, 8, 10, 2, 8, 8, 2, 0, 3, 5, 0, 10, 4, 8, 3, 5, 8,
			3, 8, 10, 3, 10, 2, 2, 6, 1, 10, 4, 8, 8, 10, 6, 8, 6, 1,
			8, 1, 0, 0, 2, 4, 10, 6, 5, 10, 5, 8, 6, 1, 3, 6, 3, 5,
			10, 6, 5, 10, 5, 8, 6, 1, 3, 6, 3, 5, 1, 7, 3, 10, 4, 8,
			1, 7, 3, 10, 2, 8, 8, 2, 0, 10, 4, 8, 0, 1, 5, 5, 1, 7,
			10, 7, 8, 8, 7, 5, 10, 2, 1, 10, 1, 7, 10, 4, 8, 3, 2, 7,
			7, 2, 6, 10, 6, 7, 10, 7, 8, 8, 7, 3, 8, 3, 0, 0, 2, 4,
			6, 8, 10, 6, 5, 8, 6, 7, 5, 6, 8, 10, 6, 5, 8, 6, 7, 5,
			8, 5, 11, 0, 4, 2, 8, 5, 11, 3, 11, 0, 0, 11, 8, 11, 8, 4,
			11, 4, 2, 11, 2, 3, 2, 6, 1, 8, 5, 11, 8, 5, 11, 1, 0, 6,
			6, 0, 4, 2, 6, 1, 3, 11, 0, 0, 11, 8, 8, 4, 6, 8, 6, 11,
			11, 6, 1, 11, 1, 3, 1, 7, 3, 8, 5, 11, 3, 0, 5, 8, 4, 7,
			8, 7, 11, 4, 2, 1, 4, 1, 7, 1, 7, 11, 1, 11, 8, 1, 8, 0,
			8, 4, 7, 8, 7, 11, 4, 2, 1, 4, 1, 7, 8, 5, 11, 3, 2, 7,
			7, 2, 6, 3, 0, 5, 4, 11, 8, 4, 7, 11, 4, 6, 7, 8, 6, 11,
			11, 6, 7, 8, 0, 2, 8, 2, 6, 4, 11, 8, 4, 7, 11, 4, 6, 7,
			11, 10, 5, 5, 10, 4, 2, 0, 5, 2, 5, 11, 2, 11, 10, 10, 4, 0,
			10, 0, 3, 10, 3, 11, 3, 11, 10, 3, 10, 2, 2, 6, 1, 11, 10, 5,
			5, 10, 4, 11, 1, 5, 5, 1, 0, 11, 10, 6, 11, 6, 1, 0, 2, 4,
			3, 6, 1, 3, 10, 6, 3, 11, 10, 3, 6, 1, 3, 10, 6, 3, 11, 10,
			1, 7, 3, 11, 10, 5, 5, 10, 4, 1, 7, 3, 2, 0, 5, 2, 5, 11,
			2, 11, 10, 7, 0, 1, 7, 11, 0, 11, 4, 0, 11, 10, 4, 11, 1, 7,
			11, 2, 1, 11, 10, 2, 2, 4, 3, 4, 5, 3, 10, 6, 11, 6, 7, 11,
			3, 0, 5, 10, 6, 11, 6, 7, 11, 0, 2, 4, 10, 6, 11, 6, 7, 11,
			10, 6, 11, 6, 7, 11, 9, 6, 10, 0, 4, 2, 9, 6, 10, 3, 5, 0,
			9, 6, 10, 9, 6, 10, 2, 3, 4, 4, 3, 5, 2, 10, 1, 1, 10, 9,
			0, 4, 10, 0, 10, 9, 0, 9, 1, 3, 5, 0, 2, 10, 1, 1, 10, 9,
			9, 5, 10, 10, 5, 4, 9, 1, 3, 9, 3, 5, 1, 7, 3, 9, 6, 10,
			2, 1, 6, 9, 7, 4, 9, 4, 10, 7, 3, 0, 7, 0, 4, 9, 6, 10,
			0, 1, 5, 5, 1, 7, 2, 1, 6, 7, 10, 9, 7, 4, 10, 7, 5, 4,
			10, 9, 7, 10, 7, 3, 10, 3, 2, 9, 7, 4, 9, 4, 10, 7, 3, 0,
			7, 0, 4, 9, 7, 5, 9, 5, 10, 10, 5, 0, 10, 0, 2, 7, 10, 9,
			7, 4, 10, 7, 5, 4, 8, 9, 4, 4, 9, 6, 9, 6, 2, 9, 2, 0,
			9, 0, 8, 3, 5, 0, 8, 9, 4, 4, 9, 6, 5, 8, 9, 5, 9, 3,
			3, 9, 6, 3, 6, 2, 1, 2, 4, 1, 4, 8, 1, 8, 9, 0, 8, 9,
			0, 9, 1, 0, 2, 4, 8, 3, 5, 8, 1, 3, 8, 9, 1, 8, 3, 5,
			8, 1, 3, 8, 9, 1, 1, 7, 3, 8, 9, 4, 4, 9, 6, 1, 7, 3,
			9, 6, 2, 9, 2, 0, 9, 0, 8, 0, 1, 5, 5, 1, 7, 8, 9, 4,
			4, 9, 6, 2, 1, 6, 9, 7, 8, 7, 5, 8, 3, 8, 7, 7, 8, 9,
			3, 2, 4, 3, 4, 8, 0, 7, 3, 0, 9, 7, 0, 8, 9, 0, 2, 4,
			9, 7, 8, 7, 5, 8, 9, 7, 8, 7, 5, 8, 9, 6, 10, 8, 5, 11,
			10, 8, 4, 11, 6, 5, 11, 9, 6, 5, 2, 0, 5, 6, 2, 9, 6, 10,
			3, 11, 0, 0, 11, 8, 9, 6, 10, 11, 8, 4, 11, 4, 2, 11, 2, 3,
			8, 5, 11, 2, 10, 1, 1, 10, 9, 8, 5, 11, 0, 4, 10, 0, 10, 9,
			0, 9, 1, 2, 10, 1, 1, 10, 9, 3, 11, 0, 0, 11, 8, 10, 8, 4,
			11, 9, 3, 9, 1, 3, 11, 9, 7, 10, 5, 6, 10, 8, 5, 6, 3, 1,
			6, 5, 3, 0, 4, 2, 11, 9, 7, 10, 5, 6, 10, 8, 5, 6, 3, 1,
			6, 5, 3, 9, 6, 10, 1, 7, 11, 1, 11, 8, 1, 8, 0, 9, 6, 10,
			8, 4, 7, 8, 7, 11, 4, 2, 1, 4, 1, 7, 8, 5, 11, 10, 9, 7,
			10, 7, 3, 10, 3, 2, 8, 5, 11, 9, 7, 4, 9, 4, 10, 7, 3, 0,
			7, 0, 4, 11, 9, 7, 10, 8, 2, 8, 0, 2, 10, 8, 4, 11, 9, 7,
			5, 11, 9, 5, 9, 6, 5, 6, 4, 11, 6, 5, 11, 9, 6, 5, 2, 0,
			5, 6, 2, 11, 9, 4, 9, 6, 4, 11, 0, 3, 11, 4, 0, 2, 9, 6,
			2, 11, 9, 2, 3, 11, 11, 4, 5, 11, 9, 4, 9, 2, 4, 9, 1, 2,
			9, 5, 11, 9, 0, 5, 9, 1, 0, 0, 2, 4, 11, 9, 3, 9, 1, 3,
			11, 9, 3, 9, 1, 3, 1, 7, 3, 5, 11, 9, 5, 9, 6, 5, 6, 4,
			1, 7, 3, 11, 6, 5, 11, 9, 6, 5, 2, 0, 5, 6, 2, 11, 9, 7,
			1, 6, 0, 6, 4, 0, 2, 1, 6, 11, 9, 7, 11, 9, 7, 2, 4, 3,
			4, 5, 3, 3, 0, 5, 11, 9, 7, 0, 2, 4, 11, 9, 7, 11, 9, 7,
			11, 7, 9, 0, 4, 2, 11, 7, 9, 3, 5, 0, 11, 7, 9, 11, 7, 9,
			2, 3, 4, 4, 3, 5, 2, 6, 1, 11, 7, 9, 11, 7, 9, 1, 0, 6,
			6, 0, 4, 1, 3, 7, 11, 5, 6, 11, 6, 9, 5, 0, 2, 5, 2, 6,
			1, 3, 7, 5, 9, 11, 5, 6, 9, 5, 4, 6, 11, 3, 9, 9, 3, 1,
			0, 4, 2, 11, 3, 9, 9, 3, 1, 9, 11, 5, 9, 5, 0, 9, 0, 1,
			11, 5, 4, 11, 4, 9, 9, 4, 2, 9, 2, 1, 2, 6, 9, 2, 9, 11,
			2, 11, 3, 11, 4, 9, 9, 4, 6, 11, 3, 0, 11, 0, 4, 11, 5, 6,
			11, 6, 9, 5, 0, 2, 5, 2, 6, 5, 9, 11, 5, 6, 9, 5, 4, 6,
			10, 4, 8, 11, 7, 9, 11, 7, 9, 10, 2, 8, 8, 2, 0, 8, 11, 5,
			9, 4, 7, 9, 10, 4, 7, 0, 3, 7, 4, 0, 8, 11, 5, 10, 7, 9,
			10, 3, 7, 10, 2, 3, 9, 10, 6, 8, 7, 4, 8, 11, 7, 4, 1, 2,
			4, 7, 1, 9, 10, 6, 1, 11, 7, 1, 8, 11, 1, 0, 8, 0, 2, 4,
			11, 7, 9, 10, 6, 5, 10, 5, 8, 6, 1, 3, 6, 3, 5, 11, 7, 9,
			10, 6, 5, 10, 5, 8, 6, 1, 3, 6, 3, 5, 10, 4, 8, 11, 3, 9,
			9, 3, 1, 2, 1, 10, 1, 9, 10, 3, 0, 11, 0, 8, 11, 8, 11, 5,
			0, 10, 4, 0, 9, 10, 0, 1, 9, 8, 11, 5, 2, 1, 10, 1, 9, 10,
			9, 10, 6, 11, 4, 8, 11, 2, 4, 11, 3, 2, 9, 10, 6, 3, 0, 11,
			0, 8, 11, 10, 4, 8, 11, 5, 6, 11, 6, 9, 5, 0, 2, 5, 2, 6,
			9, 10, 6, 8, 11, 5, 9, 8, 7, 7, 8, 5, 0, 4, 2, 9, 8, 7,
			7, 8, 5, 0, 3, 7, 0, 7, 9, 0, 9, 8, 3, 7, 8, 7, 9, 8,
			3, 4, 2, 3, 8, 4, 2, 6, 1, 9, 8, 7, 7, 8, 5, 0, 5, 1,
			5, 7, 1, 8, 4, 9, 4, 6, 9, 1, 3, 7, 9, 2, 6, 9, 0, 2,
			9, 8, 0, 1, 3, 7, 8, 4, 9, 4, 6, 9, 8, 5, 3, 8, 3, 1,
			8, 1, 9, 0, 4, 2, 8, 5, 3, 8, 3, 1, 8, 1, 9, 0, 9, 8,
			0, 1, 9, 1, 4, 2, 1, 8, 4, 1, 9, 8, 5, 9, 8, 5, 3, 9,
			3, 6, 9, 3, 2, 6, 3, 0, 5, 8, 4, 9, 4, 6, 9, 9, 2, 6,
			9, 0, 2, 9, 8, 0, 8, 4, 9, 4, 6, 9, 7, 9, 10, 7, 10, 4,
			7, 4, 5, 9, 5, 7, 9, 10, 5, 10, 0, 5, 10, 2, 0, 9, 4, 7,
			9, 10, 4, 7, 0, 3, 7, 4, 0, 10, 7, 9, 10, 3, 7, 10, 2, 3,
			2, 6, 1, 7, 9, 10, 7, 10, 4, 7, 4, 5, 9, 10, 6, 0, 5, 1,
			5, 7, 1, 2, 6, 1, 9, 4, 7, 9, 10, 4, 7, 0, 3, 7, 4, 0,
			1, 3, 7, 9, 10, 6, 9, 10, 5, 10, 4, 5, 9, 3, 1, 9, 5, 3,
			3, 0, 5, 2, 1, 10, 1, 9, 10, 0, 10, 4, 0, 9, 10, 0, 1, 9,
			2, 1, 10, 1, 9, 10, 9, 10, 6, 2, 4, 3, 4, 5, 3, 3, 0, 5,
			9, 10, 6, 0, 2, 4, 9, 10, 6, 9, 10, 6, 10, 11, 6, 6, 11, 7,
			0, 4, 2, 10, 11, 6, 6, 11, 7, 3, 5, 0, 10, 11, 6, 6, 11, 7,
			2, 3, 4, 4, 3, 5, 10, 11, 6, 6, 11, 7, 11, 7, 1, 11, 1, 2,
			11, 2, 10, 7, 1, 0, 7, 0, 11, 11, 0, 4, 11, 4, 10, 1, 3, 7,
			2, 5, 0, 2, 11, 5, 2, 10, 11, 1, 3, 7, 11, 5, 10, 5, 4, 10,
			3, 1, 6, 3, 6, 10, 3, 10, 11, 0, 4, 2, 3, 1, 6, 3, 6, 10,
			3, 10, 11, 11, 5, 1, 5, 0, 1, 11, 6, 10, 11, 1, 6, 2, 1, 6,
			11, 5, 10, 5, 4, 10, 3, 10, 11, 3, 2, 10, 10, 0, 4, 10, 3, 0,
			10, 11, 3, 2, 5, 0, 2, 11, 5, 2, 10, 11, 11, 5, 10, 5, 4, 10,
			4, 8, 11, 4, 11, 7, 4, 7, 6, 8, 11, 6, 11, 7, 6, 8, 2, 0,
			8, 6, 2, 3, 5, 0, 4, 8, 11, 4, 11, 7, 4, 7, 6, 8, 11, 5,
			3, 7, 2, 7, 6, 2, 8, 7, 4, 8, 11, 7, 4, 1, 2, 4, 7, 1,
			1, 11, 7, 1, 8, 11, 1, 0, 8, 3, 5, 0, 8, 7, 4, 8, 11, 7,
			4, 1, 2, 4, 7, 1, 1, 3, 7, 8, 11, 5, 8, 6, 4, 8, 11, 6,
			11, 1, 6, 11, 3, 1, 2, 1, 6, 3, 0, 11, 0, 8, 11, 8, 11, 5,
			1, 6, 0, 6, 4, 0, 2, 1, 6, 8, 11, 5, 11, 4, 8, 11, 2, 4,
			11, 3, 2, 3, 0, 11, 0, 8, 11, 0, 2, 4, 8, 11, 5, 8, 11, 5,
			6, 10, 8, 6, 8, 5, 6, 5, 7, 0, 4, 2, 6, 10, 8, 6, 8, 5,
			6, 5, 7, 10, 7, 6, 10, 8, 7, 8, 3, 7, 8, 0, 3, 10, 8, 4,
			3, 7, 2, 7, 6, 2, 10, 8, 7, 8, 5, 7, 10, 1, 2, 10, 7, 1,
			10, 8, 4, 0, 5, 1, 5, 7, 1, 1, 3, 7, 10, 8, 2, 8, 0, 2,
			1, 3, 7, 10, 8, 4, 10, 5, 6, 10, 8, 5, 6, 3, 1, 6, 5, 3,
			0, 4, 2, 10, 5, 6, 10, 8, 5, 6, 3, 1, 6, 5, 3, 8, 6, 10,
			8, 1, 6, 8, 0, 1, 2, 1, 6, 10, 8, 4, 3, 8, 5, 3, 10, 8,
			3, 2, 10, 3, 0, 5, 10, 8, 4, 10, 8, 2, 8, 0, 2, 10, 8, 4,
			6, 5, 7, 6, 4, 5, 5, 2, 0, 5, 6, 2, 5, 7, 6, 7, 0, 3,
			7, 4, 0, 7, 6, 4, 3, 7, 2, 7, 6, 2, 4, 1, 2, 4, 7, 1,
			4, 5, 7, 0, 5, 1, 5, 7, 1, 0, 2, 4, 1, 3, 7, 1, 3, 7,
			6, 3, 1, 6, 5, 3, 6, 4, 5, 3, 0, 5, 2, 1, 6, 1, 6, 0,
			6, 4, 0, 2, 1, 6, 2, 4, 3, 4, 5, 3, 3, 0, 5, 0, 2, 4
		}
	);
}

}